{
  "hash": "46104217ae6632f122d2d827ac0884ac",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Update information in database\nexecute: \n eval: true\n---\n\n\nSome updates in the database and repositories are not reflected automatically.\n\nHere we try to do some checks and updates to keep this page as accurate as possible.\n\n\n## Set up work directory\n\nWe use library `here` to define relative paths\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::i_am(\"how2/update-database-info.qmd\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /Users/z3529065/proyectos/typology-website/typology-map-info\n```\n\n\n:::\n:::\n\n## Zenodo\n\nFirst, we will use the `zen4R` package to query Zenodo depositions.\n\nWe store the Zenodo API credentials in the `_environment.local` file in the project directory. See file `_environment.required` for the format. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(zen4R)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\nzenodo <- ZenodoManager$new(\n   token = Sys.getenv(\"ZENODO_TOKEN\"), \n   logger = \"INFO\" \n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[zen4R][INFO] ZenodoManager - Successfully connected to Zenodo with user token \n```\n\n\n:::\n\n```{.r .cell-code}\nmy_zenodo_records <- zenodo$getDepositions(size=1000,all_version=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[zen4R][INFO] ZenodoRequest - Fetching https://zenodo.org/api/deposit/depositions?q=&size=1000&page=1&all_versions=1 \n[zen4R][INFO] ZenodoManager - Successfully fetched list of depositions - page 1 \n[zen4R][INFO] ZenodoManager - Successfully fetched list of depositions! \n```\n\n\n:::\n:::\n\n\nNow we create a table with the dois, titles and map codes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_repos <- lapply(my_zenodo_records, function(x) {\n    tibble(doi = x$doi, title=x$metadata$title, version=x$metadata$version)\n}) |> \n    bind_rows() |>\n    filter(grepl(\"Indicative distribution map for Ecosystem Functional Group\", \n        title)) |>\n    mutate(\n        map_code = str_split_fixed(version,\" \", n=2)[,1],\n        map_version = str_split_fixed(version,\" \", n=2)[,2]\n    )\n```\n:::\n\n\n## Database\n\n### Database connection\n\nWe store databse credentials in the `_environment.local` file in the project directory. See file `_environment.required` for the format. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"RPostgreSQL\")\n\ndrv <- dbDriver(\"PostgreSQL\") ## remember to update .pgpass file\n\ncon <- dbConnect(drv, \n                 dbname = Sys.getenv(\"DBNAME\"),\n                 host = Sys.getenv(\"DBHOST\"),\n                 port = Sys.getenv(\"DBPORT\"),\n                 user = Sys.getenv(\"DBUSER\"))\n```\n:::\n\n \n### Queries\n\nUpdate `map_doi` in table `map_metadata` for EFG maps:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqueries <- map_repos |>\n    transmute(queries=sprintf(\"UPDATE map_metadata SET map_doi='%s' WHERE map_code='%s' AND map_version='%s' AND map_doi IS NULL;\", doi, map_code, map_version)) |>\n    pull(queries)\n\nfor (upd in queries) {\n    res <- dbGetQuery(con,upd)\n}\n```\n:::\n\n\nCheck results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqry <- \"select count(*) from map_metadata where map_doi is NOT NULL;\"\ndbGetQuery(con,qry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  count\n1   111\n```\n\n\n:::\n:::\n\n\n\n### Close connection\n\n::: {.cell}\n\n```{.r .cell-code}\ndbDisconnect(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::",
    "supporting": [
      "update-database-info_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}