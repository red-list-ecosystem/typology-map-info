```{r versions-setup}
#| warning: false
#| message: false
library(RPostgreSQL)
library(dplyr)
library(stringr)

efg_code <- params$efgcode
efg_code_ <- gsub("\\.","_",efg_code)
here::i_am(sprintf("map-info/%s_valid.qmd", efg_code_))

```



```{r}
#| label: queries
#| message: false
#| results: hide
drv <- dbDriver("PostgreSQL") ## remember to update .pgpass file

con <- dbConnect(drv, 
                 dbname = Sys.getenv("DBNAME"),
                 host = Sys.getenv("DBHOST"),
                 port = Sys.getenv("DBPORT"),
                 user = Sys.getenv("DBUSER"))

qry <- sprintf("SELECT map_code, map_version, map_type
    FROM map_metadata WHERE code = '%s' 
    AND status = 'valid'
    ORDER BY map_version DESC;", efg_code)

maps_available <- dbGetQuery(con,qry) 

qry <- sprintf("
SELECT map_code, map_version, map_file, file_description, file_comments, f.map_script 
FROM map_files f
LEFT JOIN map_metadata
    USING(map_code, map_version)
WHERE code = '%s';", efg_code)

map_files <- dbGetQuery(con,qry) 

qry <- sprintf("SELECT DISTINCT dataset, ref_code, source_of, spatial_resolution, accuracy_evaluation, temporal_resolution, rule_set 
FROM map_references r 
LEFT JOIN map_metadata
    USING(map_code, map_version)
WHERE map_code = '%s' AND map_version = '%s' 
AND status = 'valid';", 
    map_attrs["map_code"],
    map_attrs["map_version"])

map_datasets <- dbGetQuery(con,qry) 

qry <- sprintf("SELECT ref_code, ref_markdown
FROM ref_list 
WHERE ref_code IN (
    SELECT ref_code 
    FROM map_references r 
    LEFT JOIN map_metadata
        USING(map_code, map_version)
    WHERE code = '%s' 
    AND status = 'valid'
);", efg_code)

maps_refs <- dbGetQuery(con,qry) 

qry <- sprintf("SELECT dataset, unnest(urls) as url FROM datasets
WHERE dataset IN ('%s');", paste(map_datasets$dataset, collapse = "','"))

dataset_urls <- dbGetQuery(con,qry) |>
    filter(!url %in% c("", NA, "localhost")) |>
    mutate(url = sprintf("<%s>{target='links'}", url)) |>
    group_by(dataset) |>
    summarise( url = paste(url, collapse = " :: "))


qry <- sprintf("SELECT dataset, unnest(license_info) as lcs FROM datasets
WHERE dataset IN ('%s');", paste(map_datasets$dataset, collapse = "','"))

dataset_licenses <- dbGetQuery(con,qry) |>
    group_by(dataset) |>
    summarise( license_info = paste(lcs, collapse = " :: "))

qry <- sprintf("SELECT concept_alignment, ground_observations, accuracy_evaluation, time_series, evaluation, processing, license
FROM map_evaluation
LEFT JOIN map_metadata
        USING(map_code, map_version)
    WHERE code = '%s' 
    AND status = 'valid'",
    efg_code
)
map_evaluation <- dbGetQuery(con,qry)
dbDisconnect(con)
```



### Datasets

```{r}
#| output: asis
mdtext_string <- "**%s** (%s):\n\nSource of _%s_.\n Resolution: %s, %s.\n Accuracy evaluation: %s.\n\n"
map_datasets |>
    mutate(mdtext = sprintf(mdtext_string,
        dataset,
        ref_code,
        source_of,
        spatial_resolution,
        temporal_resolution,
        accuracy_evaluation
    )) |>
    pull(mdtext) |>
    cat()

```

```{r}
knitr::kable(dataset_urls)
```

### Processing

```{r}
#| output: asis
mdtext_string <- "Processing steps used in this map are: *%s*.\n\n"
map_evaluation |>
    filter(!is.na(evaluation)) |>
    mutate(mdtext = sprintf(mdtext_string,
        str_replace_all(processing, "[{}\"]", "") |> str_replace_all(",", "* :: *")
    )) |>
    pull(mdtext) |>
    cat()
```

### Map evaluation


```{r}
#| output: asis
mdtext_string <- "This map is considered to be a ***%s*** based on the following characteristics:\n\nConcept alignment is *%s*.\n\nGround observations are _%s_.\n\n The accuracy evaluation *%s*.\n\n"
map_evaluation |>
    filter(!is.na(evaluation)) |>
    mutate(mdtext = sprintf(mdtext_string,
        str_replace_all(evaluation, "[{}\"]", ""), 
        str_replace_all(concept_alignment, "[{}\"]", ""), 
        str_replace_all(ground_observations, "[{}\"]", ""), 
        str_replace_all(accuracy_evaluation, "[{}\"]", "")
   )) |>
    pull(mdtext) |>
    cat()

```

## How to use the data

### Available files

```{r}
#| output: asis

if (nrow(maps_available)>1) {
    cat(sprintf(":::{.aside}\n\nFollowing maps are considered current and valid indicative distribution maps for this ecosystem functional group. `Web navigation` maps are optimised for use in webapps, but they have similar methods and differ only in details of format and processing. \n\n"))

    maps_available |>
        mutate(mdtext = sprintf("- %s (**code: %s**, version %s) \n", 
            map_type, map_code, map_version)) |>
        pull(mdtext) |> 
        cat()

    cat(sprintf("\n\n:::\n\n"))
}
```

You can download geospatial data for this map from the following sources:

```{r}
#| results: asis
#| eval: true
for (j in seq(along = maps_available$map_code)) {
    ma <- maps_available |>
        slice(j)
    maf <- ma |> inner_join(map_files, by = c("map_code", "map_version")) |>
        filter(!grepl("GrassGIS", file_description)) |>
        mutate(link = sprintf("[%s](%s){target=\"gisdata\"}", file_description, map_file)) |>
        group_by(map_code,map_version) |>
        summarise(links = paste(link, collapse = " :: "), .groups = 'keep')
    if (nrow(maf)>0) {
        maf |>
            mutate(mdtext = sprintf("**%s** (%s): %s\n\n", map_code, map_version, links)) |>
            pull(mdtext) |>
            cat()
    }
}
```

Note that you need to login to some services like [mapbox](https://www.mapbox.com){target="links"} or [earthengine](https://earthengine.google.com){target="links"}, and in some cases you also need to request access to the files.

###  License information

Indicative maps have been released with a ![](https://zenodo.org/static/icons/licenses/cc-by-icon.svg){height=20} Creative Commons Attribution 4.0 International license. 

```{r}
#| output: asis
license_eval <- map_evaluation |>
    filter(!is.na(evaluation)) |>
    pull(license)
if (nrow(license_eval)>0) {

    if (license_eval %in% "Non-commercial use") {
        cat("Datasets used to create this map might have some restriction for commercial use, see details below.\n\n")
    } else if (license_eval %in% "Commercial use") {
        cat("Datasets used to create this map have similar licenses, but please check the license information below.\n\n")
    } else {
        cat("License information for some datasets used to create this map is incomplete or undocumented. Check details below.\n\n")

    }
}

```


```{r}
knitr::kable(dataset_licenses)
```

## References

References used in this version of the maps.

```{r}
#| output: asis
maps_refs |>
    mutate(mdtext = sprintf("- %s \n", ref_markdown)) |>
    pull(mdtext) |> 
    cat()
```