---
title: "T1.1 Tropical/Subtropical lowland rainforests"
categories:
 - T1.1
 - valid
format:
 html: 
  code-tools:
   source: true
---

Here comes the information about the valid indicative distribution map for T1.1

## Data source

We downloaded data from the main zenodo repository (latest release) into our gisdata folder:

```{r}
here::i_am("map-info/T1_1.qmd")
out_folder <- here::here("gisdata", "indicative-maps","latest")
```

## Map details

Map details are stored in a xml file that is part of the zenodo download.

Check the file was downloaded:

```{r}
map_details_file <- paste(out_folder, "map-details.xml", sep = "/")

file.exists(map_details_file)
```

We'll use the `xml2` library to read the xml file

```{r}
library(xml2)
map_details <- read_xml(map_details_file)
map_info <- map_details |> xml_find_first("//Map[@efg_code='T1.1']")
```

Map version is described in the map attributes:

```{r}
map_info |> xml_attrs() 
```

We can use the xml content to create paragraphs with information about the map: 

And verify description:

```{r}
#| output: asis

markdown_text <- sprintf("### Map description for *%s*\n%s.",
    map_info |> xml_find_first("Functional_group") |> xml_text(),
    map_info |> xml_find_first("Description") |> xml_text()
)

cat(markdown_text)
```

## Raster map

We check the list of map files in the compressed raster archive:

```{r}
rast_tar <- here::here(out_folder, "all-maps-raster-geotiff.tar.bz2")
```

You could select the map for this functional group using the efg_code from the map details xml:

```{r}
#| eval: false
rast_list <- untar(rast_tar, list = TRUE)
efg_code <- map_info |> xml_attr("efg_code")
match_pattern <- sprintf("^%s", efg_code)
selected_map <- grep(match_pattern, rast_list, value = T)
```

Or, more directly, using map code and map version attributes:

```{r}
raster_name <- 
    sprintf("%s_%s.tif",
        map_info |> xml_attr("map_code"),
        map_info |> xml_attr("map_version"))
```

Now we create a temporary directory for the uncompressed data.

```{r}
workdir <- tempdir()
```

```{r}
#| eval: true
#| echo: false

# we use this internally to speed up some steps:
workdir <- here::here("sandbox")
```

Extract the data here (unless it already exists)
```{r}
if (!raster_name %in% dir(workdir))
    untar(rast_tar, files = raster_name, exdir = workdir)
```


We'll use the terra library to read the raster file
```{r}
library(terra)
selected_raster <- terra::rast(paste(workdir, raster_name, sep = "/"))

```

Summary of the raster layer according to `terra::rast`:

```{r}
selected_raster
```

```{r}
plot(selected_raster)
```


## Vector map

We follow similar steps for the vector files. 

We vector archive is here:

```{r}
vect_tar <- here::here(out_folder, "all-maps-vector-geojson.tar.bz2")
```

We select the map for this functional group using the map_code and map_version from the map details xml:

```{r}
vector_name <- 
    sprintf("%s_%s.json",
        map_info |> xml_attr("map_code"),
        map_info |> xml_attr("map_version"))
```

We uncompress this into the tempdir

```{r}
print(workdir)
if (!vector_name %in% dir(workdir))
    untar(vect_tar, files = vector_name, exdir = workdir)
```

```{r}
selected_vector <- terra::vect(paste(workdir, vector_name, sep = "/"))

```

Summary of the raster layer according to `terra::vect`:

```{r}
selected_vector
```

```{r}
#| eval: false
plot(selected_vector)
```